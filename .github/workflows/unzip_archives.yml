name: Descomprimir y Eliminar ZIPs Subidos

on:
  push:
    paths:
      - '**.zip' # Se activa si cualquier archivo .zip se añade o modifica en cualquier ubicación

jobs:
  unzip_and_delete_zips:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Necesario para hacer push de los cambios de vuelta al repositorio
    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4
        with:
          # Necesitamos el historial completo para comparar los commits del push
          fetch-depth: 0

      - name: Encontrar, Descomprimir y Eliminar Archivos ZIP
        id: unzip_delete_step # Cambiado el id del paso para mayor claridad
        run: |
          echo "Buscando archivos .zip nuevos o modificados..."
          
          if [[ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]]; then
            echo "Nueva rama o primer push. Obteniendo todos los .zip del commit actual (${{ github.sha }})."
            zip_files_to_process=$(git ls-tree --full-tree -r --name-only ${{ github.sha }} | grep '\.zip$' || true)
          else
            echo "Push a rama existente. Comparando commits ${{ github.event.before }} y ${{ github.sha }}."
            zip_files_to_process=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '\.zip$' || true)
          fi

          if [ -z "$zip_files_to_process" ]; then
            echo "No se encontraron archivos .zip nuevos o modificados para procesar en este push."
            echo "processed_something=false" >> $GITHUB_OUTPUT # Cambiado nombre de output para generalizar
            exit 0
          fi

          echo "Archivos .zip a procesar:"
          echo "$zip_files_to_process"

          processed_files_list_for_commit=()

          for zip_file in $zip_files_to_process; do
            if [ -f "$zip_file" ]; then
              echo "Procesando archivo ZIP: $zip_file"
              
              parent_dir=$(dirname "$zip_file")
              base_name_no_ext=$(basename "$zip_file" .zip)
              extraction_dir="$parent_dir/$base_name_no_ext"
              
              if [[ "$parent_dir" == "." ]]; then
                extraction_dir="$base_name_no_ext"
              fi
              
              echo "Creando directorio de extracción: $extraction_dir"
              mkdir -p "$extraction_dir"
              
              echo "Descomprimiendo '$zip_file' en '$extraction_dir/'"
              unzip -q -o "$zip_file" -d "$extraction_dir"
              
              # --- MODIFICACIÓN PRINCIPAL: Eliminar el archivo ZIP original ---
              echo "Eliminando archivo ZIP original: $zip_file"
              rm "$zip_file"
              # --- FIN DE LA MODIFICACIÓN ---
              
              processed_files_list_for_commit+=("$zip_file (descomprimido y eliminado)")
            else
              echo "Advertencia: El archivo '$zip_file' listado en el diff no se encontró. Omitiendo."
            fi
          done

          if [ ${#processed_files_list_for_commit[@]} -gt 0 ]; then
            echo "processed_something=true" >> $GITHUB_OUTPUT
            processed_files_str=$(IFS=, ; echo "${processed_files_list_for_commit[*]}")
            echo "processed_zips_info=$processed_files_str" >> $GITHUB_OUTPUT
            echo "Archivos ZIP procesados (descomprimidos y eliminados): $processed_files_str"
          else
            echo "No se procesó ningún archivo ZIP nuevo o modificado."
            echo "processed_something=false" >> $GITHUB_OUTPUT
          fi

      - name: Configurar Git para el Commit
        if: steps.unzip_delete_step.outputs.processed_something == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Hacer Commit de los Cambios
        if: steps.unzip_delete_step.outputs.processed_something == 'true'
        run: |
          git add .
          
          commit_message="Autoproceso ZIPs: ${{ steps.unzip_delete_step.outputs.processed_zips_info }}"
          echo "Preparando commit con mensaje: $commit_message"
          
          if git diff --staged --quiet; then
            echo "No hay cambios para hacer commit."
          else
            git commit -m "$commit_message"
            echo "Haciendo push de los cambios..."
            git push
          fi
